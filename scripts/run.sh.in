#!/bin/bash

target=$1
optimize=""
ta_more_args=""

shift # skip over $1
while (( "$#" )); do
  case "$1" in
    -o|--optimization)
      if [ -n "$2" ] && [ ${2:0:2} == "-O" ]; then
        optimize=$2
        shift 2
      else
        echo "Error: Optimization argument for $1 is erroneous: $2" >&2
        exit 1
      fi
      ;;
    *) # preserve other arguments
      ta_more_args="$ta_more_args $1"
      shift
      ;;
  esac
done
# set other positional arguments in their proper place
eval set -- "ta_more_args"

extension="${target##*.}"
tmpfile=${target##*/}

if [ $extension == "c" ]; then
  compiler=clang
else
  compiler=clang++
fi

if [ -e "types.yaml" ]; then
  rm "types.yaml"
fi

function make_no_optim() {
  # Order: heap and stack/global together, no optimization pass
  $compiler @TYPEART_INCLUDE_DIRS@ -O1 -Xclang -disable-llvm-passes -S -emit-llvm "$target" -o - | opt $typeart_plugin -typeart-alloca -typeart-stats $ta_more_args | llc -x=ir -filetype=obj -o "$tmpfile".o
}

function make_with_optim() {
  # Order: heap, optimize, alloca with additional args..
  $compiler @TYPEART_INCLUDE_DIRS@ -O1 -Xclang -disable-llvm-passes -S -emit-llvm "$target" -o - | opt $typeart_plugin -typeart-stats $ta_more_args  | opt $optimize -S | opt $typeart_plugin -typeart-no-heap -typeart-alloca -typeart-stats $ta_more_args | llc -x=ir -filetype=obj -o "$tmpfile".o
}

function compile() {
  local typeart_plugin="-load @TYPEART_ANALYSIS_PASS_DIR@/@TYPEART_ANALYSIS_PLUGIN@ -load @TYPEART_PASS_DIR@/@TYPEART_PLUGIN@ -typeart"
  if [ "$optimize" == " " ]; then
    make_no_optim
  else
    make_with_optim
  fi
  $compiler "$tmpfile".o -L@TYPEART_RT_DIR@ -ltypeart-rt -o "$tmpfile".exe
}

compile
echo -e Executing with runtime lib
LD_LIBRARY_PATH="$LD_LIBRARY_PATH:@TYPEART_RT_DIR@" ./"$tmpfile".exe