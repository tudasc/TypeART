#!/bin/bash

function global_init() {
  compiler="@TYPEART_COMPILER@"
  opt_tool="@TYPEART_OPT@"
  llc_tool="@TYPEART_LLC@"

  typeart_ldflags="-L@CMAKE_INSTALL_PREFIX@/lib/ \
                   -Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib/ \
                   -ltypeart-rt"

  typeart_plugin="-load @TYPEART_ANALYSIS_PASS_DIR@/@TYPEART_ANALYSIS_PLUGIN@ \
                  -load @TYPEART_PASS_DIR@/@TYPEART_PLUGIN@ -typeart"
  typeart_includes="@TYPEART_INCLUDE_DIRS@"
  typeart_stack_mode_args="-typeart-no-heap -typeart-alloca -typeart-stats"
  typeart_heap_mode_args="-typeart-no-heap=false -typeart-stats"
}

function is_linking() {
  for arg in "$@" ;
  do
    case "$arg" in
      -c|-S|-E|-M|-MM|-MMD)
        return 0
      ;;
    esac
  done
  return 1
}

function try_extract_source() {
# $1 == flag (source file); $2 == shift value
  local extension="${1##*.}"
  local shift_val=$2

  case "$extension" in
    cpp|cxx|cc|c)
      source_file="$1"
    	found_src_file=1
      return $shift_val
      ;;
    *)
      return 1
      ;;
   esac
}

function handle_source_flag() {
  if [ -n "$2" ] ; then
     try_extract_source "$2" 2
  else
     try_extract_source "$1" 1
  fi
  return $?
}

function try_extract_object() {
# $1 == flag (obj file); $2 == shift value
  local extension="${1##*.}"
  local shift_val=$2

  case "$extension" in
    o)
      object_file="$1"
      found_obj_file=1
      return $shift_val
      ;;
    *)
      return 1
      ;;
   esac
}

function handle_object_flag() {
  if [ -n "$2" ] ; then
     try_extract_object "$2" 2
  else
     try_extract_object "$1" 1
  fi
  return $?
}

function handle_binary() {
  if [ -n "$2" ] ; then
     exe_file="$2"
     found_exe_file=1
  fi
  return 2
}

function parse_cmd_line() {
  found_src_file=0
  found_obj_file=0
  found_exe_file=0
  while (( "$#" )); do
    case "$1" in
      -O?)
        optimize=$1
        shift
        ;;
      -c|-S|-E|-M|-MM|-MMD)
        handle_source_flag "$1" "$2"
        shift $?
      ;;
      *.cpp|*.cxx|*.cc|*.c)
        handle_source_flag "$1"
        shift $?
      ;;
      -o)
        if [ $linking == 1 ]; then
          handle_binary "$1" "$2"
        else
          handle_object_flag "$1" "$2"
        fi
        shift $?
      ;;
      *.o)
        if [ $linking == 0 ]; then
          handle_object_flag "$1"
          shift $?
        else
          # when linking, we don't care about object files
          ta_more_args="$ta_more_args $1"
          shift
        fi
      ;;
      *) # preserve other arguments
        ta_more_args="$ta_more_args $1"
        shift
        ;;
    esac
  done
  # set other positional arguments in their proper place
  eval set -- "ta_more_args"

  if [ -z ${optimize} ]; then
    optimize=-O0
  fi
}

function main_link() {
  $compiler ${typeart_ldflags} $@
}

function main_compile() {
  $compiler ${ta_more_args} -O1 -Xclang -disable-llvm-passes -S -emit-llvm "${source_file}" -o - |
  $opt_tool ${typeart_plugin} ${typeart_heap_mode_args} |
  $opt_tool ${optimize} -S |
  $opt_tool ${typeart_plugin} ${typeart_stack_mode_args} |
  $llc_tool -x=ir -filetype=obj -o "${object_file}"
}

function main_in() {
  global_init

  is_linking "$@"
  linking=$?

  if [ $linking == 1 ] ; then
    main_link "$@"
  else
    parse_cmd_line "$@"
    main_compile
  fi
}

main_in "$@"
