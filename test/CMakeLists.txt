macro(pythonize_bool truth_var var)
  if(${truth_var})
    set(${var} True)
  else()
    set(${var} False)
  endif()
endmacro()

function(configure_typeart_lit_site_cfg input output)
  # This function provides an automatic way to 'configure'-like generate a file
  # based on a set of common and custom variables, specifically targeting the
  # variables needed for the 'lit.site.cfg' files. This function bundles the
  # common variables that any Lit instance is likely to need, and custom
  # variables can be passed in.

  set(TYPEARTPASS_PROJECT_DIR ${PROJECT_SOURCE_DIR})
  set(TYPEARTPASS_BINARY_DIR ${CMAKE_BINARY_DIR})
  set(TYPEARTPASS_SCRIPT_DIR ${CMAKE_BINARY_DIR}/scripts)
  set(TYPEARTPASS_LIBRARY_DIR ${CMAKE_BINARY_DIR}/lib/passes)
  set(TYPEARTPASS_BASE_LIBRARY_DIR ${CMAKE_BINARY_DIR}/lib)
  set(TYPEARTPASS_RT_DIR ${CMAKE_BINARY_DIR}/lib/runtime)
  set(TYPEARTPASS_PROFILE_FILE ${TYPEART_PROFILE_DIR}/lit-code-%p.profraw)

  pythonize_bool(SOFTCOUNTERS TYPEARTPASS_SOFTCOUNTER)

  pythonize_bool(OPENMP_FOUND TYPEARTPASS_OPENMP)
  pythonize_bool(CMAKE_THREAD_LIBS_INIT TYPEARTPASS_THREADS)
  pythonize_bool(DISABLE_THREAD_SAFETY TYPEARTPASS_THREAD_UNSAFE)

  pythonize_bool(MPI_C_FOUND TYPEARTPASS_MPI_C)
  pythonize_bool(MPI_CXX_FOUND TYPEARTPASS_MPI_CXX)

  pythonize_bool(ENABLE_TSAN TYPEARTPASS_TSAN)
  pythonize_bool(ENABLE_ASAN TYPEARTPASS_ASAN)
  pythonize_bool(ENABLE_UBSAN TYPEARTPASS_UBSAN)

  set(TYPEART_COVERAGE False)
  if(ENABLE_CODE_COVERAGE OR ENABLE_LLVM_CODE_COVERAGE)
    set(TYPEART_COVERAGE True)
  endif()

  set(LIT_SITE_CFG_IN_HEADER
      "## Autogenerated by TypeART generation from ${input}\n## Do not edit!"
  )

  target_generate_file(${input} ${output})
endfunction()

add_format_target(format-tests
  "Formats project test source files"
  TARGETS *.c *.cpp *.h
)

configure_typeart_lit_site_cfg(
  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in
  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
)

set(TYPEARTPASS_TEST_DEPENDS typeart::TransformPass typeart::Runtime)

add_lit_testsuite(lit-pass-test
  "Running the TYPEART support pass tests"
  ${CMAKE_CURRENT_SOURCE_DIR}
  ARGS -v -j 1
  PARAMS typeartpass_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
  DEPENDS ${TYPEARTPASS_TEST_DEPENDS}
)

add_test(
  NAME ctest_lit_suite
  COMMAND
    ${LIT_COMMAND_I} -j 1 --param
    typeartpass_site_config=${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg
    ${CMAKE_CURRENT_SOURCE_DIR}
)

if(MPI_INTERCEPT_LIB)
  add_subdirectory(lulesh)
endif()

if(TEST_CONFIGURE_IDE)
  function(add_test_target_ide target header sources)
    add_executable(${target} EXCLUDE_FROM_ALL ${header} ${sources})

    add_dependencies(${target} ${TYPEARTPASS_TEST_DEPENDS})

    target_include_directories(
      ${target} PRIVATE ${PROJECT_SOURCE_DIR}/lib/typelib
                        ${PROJECT_SOURCE_DIR}/lib/runtime
                        ${PROJECT_SOURCE_DIR}
    )
  endfunction()

  file(GLOB_RECURSE TYPEART_CXX_TESTS CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
  file(GLOB_RECURSE TYPEART_CC_TESTS CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.c)
  file(GLOB_RECURSE TYPEART_TEST_HEADER CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)

  add_test_target_ide(
    typeart_cxx_test_objects "${TYPEART_TEST_HEADER}" "${TYPEART_CXX_TESTS}"
  )
  set_target_properties(typeart_cxx_test_objects PROPERTIES LINKER_LANGUAGE CXX)
  target_compile_features(typeart_cxx_test_objects PUBLIC cxx_std_17)
  add_test_target_ide(
    typeart_cc_test_objects "${TYPEART_TEST_HEADER}" "${TYPEART_CC_TESTS}"
  )
  set_target_properties(typeart_cc_test_objects PROPERTIES LINKER_LANGUAGE C)
  target_compile_features(typeart_cxx_test_objects PUBLIC c_std_99)
endif()
