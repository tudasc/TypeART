; RUN: cat %s | %apply-typeart -typeart-stack -typeart-filter-pointer-alloca=false -S 2>&1 | %filecheck %s
; RUN: cat %s | %apply-typeart -typeart-stack -typeart-call-filter -typeart-filter-pointer-alloca=false -S 2>&1 | %filecheck %s -check-prefix=CHECK-FILTER-EXP

; ModuleID = '01_alloca.c'
source_filename = "01_alloca.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MPI_send(i8* %a) {
entry:
  %a.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo_bar(i32* %a) #0 {
entry:
  %a.addr = alloca i32*, align 8
  store i32* %a, i32** %a.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  store i32 1, i32* %0, align 4
  %1 = load i32*, i32** %a.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo_bar2(i32* %a, i32* %b) #0 {
entry:
  %a.addr = alloca i32*, align 8
  %b.addr = alloca i32*, align 8
  store i32* %a, i32** %a.addr, align 8
  store i32* %b, i32** %b.addr, align 8
  %0 = load i32*, i32** %a.addr, align 8
  store i32 1, i32* %0, align 4
  %1 = load i32*, i32** %a.addr, align 8
  %2 = load i32*, i32** %b.addr, align 8
  %3 = bitcast i32* %2 to i8*
  call void @MPI_send(i8* %3)
  ret void
}


; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo_bar3() #0 {
entry:
  %a = alloca i32*, align 8
  %call = call noalias i8* @malloc(i64 40) #3
  %0 = bitcast i8* %call to i32*
  store i32* %0, i32** %a, align 8
  %1 = load i32*, i32** %a, align 8
  %2 = load i32*, i32** %a, align 8
  %3 = bitcast i32* %2 to i8*
  call void @MPI_send(i8* %3)
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; New filter, TODO: %0 = bitcast should be filterable with proper data-flow tracking
; CHECK-FILTER-EXP: define dso_local void @foo()
; CHECK-FILTER-EXP: %__ta_alloca_counter = alloca i{{(64|32)}}
; CHECK-FILTER-EXP-NEXT: store i{{(64|32)}} 0, i{{(64|32)}}* %__ta_alloca_counter
; CHECK-FILTER-EXP: %0 = bitcast i32* %a to i8*
; CHECK-FILTER-EXP-NEXT: call void @__typeart_alloc_stack(i8* %0, i32 2, i64 1)
; CHECK-FILTER-EXP: %1 = bitcast i32** %c to i8*
; CHECK-FILTER-EXP-NEXT  call void @__typeart_alloc_stack(i8* %1, i32 10, i64 1)
; CHECK-FILTER-EXP: %2 = bitcast i32* %d to i8*
; CHECK-FILTER-EXP-NEXT  call void @__typeart_alloc_stack(i8* %2, i32 2, i64 1)
; CHECK-FILTER-EXP: %3 = bitcast i32* %x to i8*
; CHECK-FILTER-EXP-NEXT  call void @__typeart_alloc_stack(i8* %3, i32 2, i64 1)
; CHECK-FILTER-EXP: %10 = load i{{(64|32)}}, i{{(64|32)}}* %__ta_alloca_counter
; CHECK-FILTER-EXP-NEXT: %11 = add i{{(64|32)}} 4, %10
; CHECK-FILTER-EXP: call void @__typeart_leave_scope(i{{(64|32)}} %__ta_counter_load)

; No filter:
; CHECK: define dso_local void @foo()
; CHECK: %__ta_alloca_counter = alloca i{{(64|32)}}
; CHECK-NEXT: store i{{(64|32)}} 0, i{{(64|32)}}* %__ta_alloca_counter
; CHECK: %0 = bitcast i32* %a to i8*
; CHECK-NEXT: call void @__typeart_alloc_stack(i8* %0, i32 2, i64 1)
; CHECK: %1 = bitcast i32* %b to i8*
; CHECK-NEXT: call void @__typeart_alloc_stack(i8* %1, i32 2, i64 1)
; CHECK: %2 = bitcast i32** %c to i8*
; CHECK-NEXT: call void @__typeart_alloc_stack(i8* %2, i32 10, i64 1)
; CHECK: %3 = bitcast i32* %d to i8*
; CHECK-NEXT: call void @__typeart_alloc_stack(i8* %3, i32 2, i64 1)
; CHECK: %4 = bitcast i32* %x to i8*
; CHECK-NEXT: call void @__typeart_alloc_stack(i8* %4, i32 2, i64 1)
; CHECK: %11 = load i{{(64|32)}}, i{{(64|32)}}* %__ta_alloca_counter
; CHECK-NEXT: %12 = add i{{(64|32)}} 5, %11
; CHECK: call void @__typeart_leave_scope(i{{(64|32)}} %__ta_counter_load)

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 {
entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32*, align 8
  %d = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 1, i32* %a, align 4
  %0 = load i32, i32* %a, align 4
  store i32 %0, i32* %b, align 4
  store i32* %a, i32** %c, align 8
  %1 = load i32, i32* %a, align 4
  store i32 %1, i32* %d, align 4
  %2 = load i32, i32* %a, align 4
  store i32 %2, i32* %x, align 4
  %3 = load i32*, i32** %c, align 8
  %4 = bitcast i32* %3 to i8*
  call void @MPI_send(i8* %4)
  %5 = load i32, i32* %d, align 4
  call void @bar(i32 %5)
  call void @ebar(i32* %d)
  call void @foo_bar(i32* %a)
  call void @foo_bar2(i32* %a, i32* %x)
  ret void
}


declare dso_local void @bar(i32) #2

declare dso_local void @ebar(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0 "}

