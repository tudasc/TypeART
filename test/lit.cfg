import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

config.name = "TypeArtPassTest"

loaded_site_cfg = getattr(config, 'loaded_site_config', False)
if not loaded_site_cfg:
  # Check for 'typeartpass_site_config' user parameter, and use that if available.
  site_cfg = lit_config.params.get('typeartpass_site_config', None)
  if site_cfg and os.path.exists(site_cfg):
    lit_config.load_config(config, site_cfg)
    raise SystemExit

typeart_lib_root = getattr(config, 'typeartpass_lib_dir', None)
typeart_rt_root = getattr(config, 'typeartpass_rt_dir', None)
typeart_script_dir = getattr(config, 'typeartpass_script_dir', None)

plugin_name = 'typeartpass.so'
plugin_args ='-typeart -typeart-stats'

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = ['.c','.cpp', '.llin']
config.excludes = ['Inputs', 'mpi_interceptor', 'lulesh']

config.substitutions.append(('%scriptpath', typeart_script_dir))
config.substitutions.append(('%pluginpath', typeart_lib_root))
config.substitutions.append(('%rtpath', typeart_rt_root))
config.substitutions.append(('%pluginname', plugin_name))
config.substitutions.append(('%pluginargs', plugin_args))

config.substitutions.append(('%run', '{}/run.sh'.format(typeart_script_dir)))
config.substitutions.append(('%apply', '{}/apply.sh'.format(typeart_script_dir)))
to_llvm_str='-O1 -Xclang -disable-llvm-passes -S -emit-llvm -o -'
config.substitutions.append(('%c-to-llvm', 'clang {}'.format(to_llvm_str)))
config.substitutions.append(('%cpp-to-llvm', 'clang++ {}'.format(to_llvm_str)))
