import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

config.name = "TypeArtPassTest"

loaded_site_cfg = getattr(config, 'loaded_site_config', False)
if not loaded_site_cfg:
  # Check for 'typeartpass_site_config' user parameter, and use that if available.
  site_cfg = lit_config.params.get('typeartpass_site_config', None)
  if site_cfg and os.path.exists(site_cfg):
    lit_config.load_config(config, site_cfg)
    raise SystemExit

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = ['.c','.cpp', '.llin', '.sh']
config.excludes = ['Inputs', 'mpi_interceptor', 'lulesh']

if config.softcounter_used:
  config.available_features.add('softcounter')

if not config.thread_unsafe_mode:
    if config.openmp_used:
      config.available_features.add('openmp')
    if config.threads_used:
      config.available_features.add('thread')

if config.mpicc_used:
  config.available_features.add('mpicc')
if config.mpicxx_used:
  config.available_features.add('mpicxx')
if config.mpicc_used and config.mpicxx_used:
   config.available_features.add('mpi')

if config.asan:
  config.available_features.add('asan')
if config.ubsan:
  config.available_features.add('ubsan')
if config.tsan:
  config.available_features.add('tsan')
if config.tsan or config.asan or config.ubsan:
  config.available_features.add('sanitizer')

profile_files       = getattr(config, 'profile_file', None)
typeart_lib_root    = getattr(config, 'typeartpass_lib_dir', None)
typeart_rt_root     = getattr(config, 'typeartpass_rt_dir', None)
typeart_script_dir  = getattr(config, 'typeartpass_script_dir', None)
transform_name      = 'typeartpass.so'
transform_pass      = '{}/{}'.format(typeart_lib_root, transform_name)
analysis_name       = 'meminstfinderpass.so'
analysis_pass       = '{}/analysis/{}'.format(typeart_lib_root, analysis_name)
std_plugin_args     = '-typeart -typeart-stats'
to_llvm_args        = '-O1 -Xclang -disable-llvm-passes -S -emit-llvm -o -'
type_file           = 'types.yaml'
openmp_c_flags      = getattr(config, 'openmp_c_flags', None)
openmp_cxx_flags    = getattr(config, 'openmp_cxx_flags', None)
#openmp_c_inc_dir    = getattr(config, 'openmp_c_inc_dir', '.')
#openmp_cxx_inc_dir  = getattr(config, 'openmp_cxx_inc_dir', '.')

config.environment['LLVM_PROFILE_FILE'] = profile_files

# Substitutions: executables use "-" separator, variables use underscore
config.substitutions.append(('%script_path', typeart_script_dir))
config.substitutions.append(('%plugin_path', typeart_lib_root))
config.substitutions.append(('%runtime_path', typeart_rt_root))

config.substitutions.append(('%type_file', type_file))

config.substitutions.append(('%transform_plugin', transform_name))
config.substitutions.append(('%analysis_plugin', analysis_name))
config.substitutions.append(('%transform_pass', transform_pass))
config.substitutions.append(('%analysis_pass', analysis_pass))

config.substitutions.append(('%arg_std', std_plugin_args))

config.substitutions.append(('%omp_c_flags', openmp_c_flags))
config.substitutions.append(('%omp_cpp_flags', openmp_cxx_flags))

# TODO refactor typeart arguments (and add args for enabling heap/stack/globals etc.)
# config.substitutions.append(('%arg_stack', '-typeart-alloca'))
# config.substitutions.append(('%arg_heap', '-typeart-no-heap'))

config.substitutions.append(('%apply-typeart', 'opt -load {} -load {} {}'.format(analysis_pass, transform_pass, std_plugin_args)))
config.substitutions.append(('%c-to-llvm', 'clang {}'.format(to_llvm_args)))
config.substitutions.append(('%cpp-to-llvm', 'clang++ {}'.format(to_llvm_args)))
config.substitutions.append(('%run', '{}/run.sh'.format(typeart_script_dir)))
config.substitutions.append(('%apply', '{}/apply.sh'.format(typeart_script_dir)))

config.substitutions.append(('%wrapper-cc', '{}/typeart-clang-test'.format(typeart_script_dir)))
config.substitutions.append(('%wrapper-cxx', '{}/typeart-clang++-test'.format(typeart_script_dir)))
config.substitutions.append(('%wrapper-mpicc', '{}/typeart-mpicc-test'.format(typeart_script_dir)))
config.substitutions.append(('%wrapper-mpicxx', '{}/typeart-mpic++-test'.format(typeart_script_dir)))

config.substitutions.append(('%mpicxx-compiler', '{}'.format(config.mpicxx)))
config.substitutions.append(('%mpicc-compiler', '{}'.format(config.mpicc)))
config.substitutions.append(('%mpi-exec', '{}'.format(config.mpiexec)))