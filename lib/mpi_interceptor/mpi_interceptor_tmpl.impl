// TypeART library
//
// Copyright (c) 2017-2022 TypeART Authors
// Distributed under the BSD 3-Clause license.
// (See accompanying file LICENSE.txt or copy at
// https://opensource.org/licenses/BSD-3-Clause)
//
// Project home: https://github.com/tudasc/TypeART
//
// SPDX-License-Identifier: BSD-3-Clause
//

#ifdef  __cplusplus
extern "C" {
#endif

//
// MPI interceptor functions for TypeArt (MPI v3.2)
//


#include "InterceptorFunctions.h"

{{fn fn_name MPI_Finalize}}
{
  ta_exit();
  return P{{fn_name}}({{args}});
}
{{endfn}}

// Send functions (1 buffer, 1 count)
{{fn fn_name MPI_Bsend
             MPI_Bsend_init
             MPI_Ibsend
             MPI_Irsend
             MPI_Isend
             MPI_Issend
             MPI_Put
             MPI_Rput
             MPI_Rsend
             MPI_Rsend_init
             MPI_Send
             MPI_Send_init
             MPI_Ssend
             MPI_Ssend_init

             MPI_Accumulate
             MPI_Raccumulate

             MPI_File_iwrite
             MPI_File_iwrite_at
             MPI_File_iwrite_shared
             MPI_File_write
             MPI_File_write_all
             MPI_File_write_all_begin
             MPI_File_write_at
             MPI_File_write_at_all
             MPI_File_write_at_all_begin
             MPI_File_write_ordered
             MPI_File_write_ordered_begin
             MPI_File_write_shared

             }}
{
const void* ta_ret_adr = __builtin_return_address(0);
{{apply_typeart_check "send" ta_check_send}}
return P{{fn_name}}({{args}});
}
{{endfn}}

// Recv functions (1 buffer, 1 count)
{{fn fn_name MPI_Get
             MPI_Imrecv
             MPI_Irecv
             MPI_Mrecv
             MPI_Recv
             MPI_Recv_init
             MPI_Rget
             MPI_Bcast
             MPI_Ibcast

             MPI_Sendrecv_replace

             MPI_File_iread
             MPI_File_iread_at
             MPI_File_iread_shared
             MPI_File_read
             MPI_File_read_all
             MPI_File_read_all_begin
             MPI_File_read_at
             MPI_File_read_at_all
             MPI_File_read_at_all_begin
             MPI_File_read_ordered
             MPI_File_read_ordered_begin
             MPI_File_read_shared
             }}
{
const void* ta_ret_adr = __builtin_return_address(0);
{{apply_typeart_check "recv" ta_check_recv}}
return P{{fn_name}}({{args}});
}
{{endfn}}

// Send/Recv functions (2 buffers, 1 or 2 count)
{{fn fn_name MPI_Allgather

             MPI_Allreduce
             MPI_Alltoall
             MPI_Gather
             MPI_Iallgather
             MPI_Iallreduce
             MPI_Ialltoall
             MPI_Iexscan
             MPI_Igather
             MPI_Ineighbor_allgather
             MPI_Ineighbor_alltoall
             MPI_Ireduce
             MPI_Iscan
             MPI_Iscatter
             MPI_Neighbor_allgather
             MPI_Neighbor_alltoall
             MPI_Reduce
             MPI_Reduce_local
             MPI_Scan
             MPI_Scatter
             MPI_Sendrecv

             MPI_Allgatherv
             MPI_Alltoallv
             MPI_Gatherv
             MPI_Iallgatherv
             MPI_Ialltoallv
             MPI_Igatherv
             MPI_Ineighbor_allgatherv
             MPI_Ineighbor_alltoallv
             MPI_Iscatterv
             MPI_Neighbor_allgatherv
             MPI_Neighbor_alltoallv
             MPI_Scatterv
             MPI_Reduce_scatter
             MPI_Reduce_scatter_block
             MPI_Ireduce_scatter
             MPI_Ireduce_scatter_block
             }}
{
const void* ta_ret_adr = __builtin_return_address(0);
{{apply_typeart_check "sendrecv" ta_check_send_and_recv}}
return P{{fn_name}}({{args}});
}
{{endfn}}


// Unsupported functions
{{fn fn_name

             MPI_Alltoallw
             MPI_Ialltoallw
             MPI_Ineighbor_alltoallw
             MPI_Neighbor_alltoallw

}}
{
const void* ta_ret_adr = __builtin_return_address(0);
ta_unsupported_mpi_call("{{fn_name}}", ta_ret_adr);
return P{{fn_name}}({{args}});
}
{{endfn}}


#ifdef  __cplusplus
}
#endif
